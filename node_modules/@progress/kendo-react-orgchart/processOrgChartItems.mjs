/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
import { isArray as I, resolveItemsIds as g, updateItem as C, getNestedValue as E } from "@progress/kendo-react-common";
import { EXPAND_FIELD as D, SELECT_FIELD as L, CHECK_FIELD as o, CHILDREN_FIELD as h, CHECK_INDETERMINATE_FIELD as N } from "./utils/consts.mjs";
function a(n, t) {
  if (!n || !n.length)
    return [];
  let e = n;
  const l = t.cloneField || "cloned", i = t.expandField || D, s = t.selectField || L, c = t.checkField || o, f = t.childrenField || h;
  return e = d(e, i, t.expand, l, f), e = d(e, s, t.select, l, f), e = d(e, c, t.check, l, f), p(e, f, t.check), e;
}
function d(n, t, e, l, i) {
  if (e) {
    const { ids: s, field: c } = m(e, t), f = !I(e) && e.idField ? g(s, e.idField, n, i) : s;
    return _(n, f, c, l, i);
  }
  return n;
}
function m(n, t) {
  let e, l;
  return I(n) ? (e = n, l = t) : (e = n.ids || [], l = n.operationField || t), { ids: e, field: l };
}
function _(n, t, e, l, i) {
  let s = n;
  return t.forEach((c) => {
    s = C(s, c, (f) => F(e, f), l, i);
  }), s;
}
function F(n, t) {
  const e = (n || "").split(".");
  let l = t;
  for (let i = 0; i < e.length; i++) {
    const s = e[i];
    if (i === e.length - 1)
      l[s] = !0;
    else if (l[s] !== void 0)
      l[s] = { ...l[s] }, l = l[s];
    else
      return;
  }
}
function p(n, t, e) {
  if (e && !I(e) && e.applyCheckIndeterminate) {
    const { field: l } = m(e, o), i = e.checkIndeterminateField || N;
    for (let s = 0; s < n.length; s++) {
      const c = n[s], f = c[t];
      f && u(
        f,
        E(l, c) ? [] : [c],
        t,
        l,
        i
      );
    }
  }
}
function u(n, t, e, l, i) {
  let s = !1;
  for (let c = 0; c < n.length; c++) {
    const f = n[c];
    if (E(l, f)) {
      if (!s)
        for (let r = 0; r < t.length; r++)
          F(i, t[r]);
      s = !0, f[e] && u(
        f[e],
        [],
        e,
        l,
        i
      );
    } else
      f[e] && u(
        f[e],
        s ? [f] : t.concat([f]),
        e,
        l,
        i
      );
  }
}
export {
  a as processOrgChartItems
};
