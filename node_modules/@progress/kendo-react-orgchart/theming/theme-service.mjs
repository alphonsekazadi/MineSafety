/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
const c = (s) => window.getComputedStyle(s).backgroundColor, d = (s) => s.toLowerCase().charCodeAt(0) - 97, v = (s) => {
  const e = s.match(/series-([a-z])$/);
  if (e !== null)
    return d(e[1]);
  const r = s.split("--series-")[1];
  return parseInt(r, 10) - 1;
};
const u = () => {
  let s = `
      <div class="k-var--series-a"></div>
      <div class="k-var--series-b"></div>
      <div class="k-var--series-c"></div>
      <div class="k-var--series-d"></div>
      <div class="k-var--series-e"></div>
      <div class="k-var--series-f"></div>
`;
  for (let e = 0; e < 30; e++)
    s += `
      <div class="k-var--series-${e + 1}"></div>`;
  return s;
}, C = `
    <div class="k-var--series-unset"></div>
    <div class="k-var--series">
      ${u()}
    </div>
`;
class m {
  getSeriesColors() {
    const e = this.element, r = [].slice.call(e.querySelectorAll(".k-var--series div")), t = c(e.querySelector(".k-var--series-unset"));
    return r.reduce(
      (o, l) => {
        const a = v(l.className), n = c(l);
        return n !== t && (o[a] = n), o;
      },
      []
      // Will populate the series colors in this array
    );
  }
}
const k = (s, e) => {
  const r = new m(), t = r.element = e.createElement("div");
  t.style.display = "none", t.innerHTML = C, e.body.appendChild(t);
  let i;
  try {
    i = r.getSeriesColors();
  } finally {
    e.body.removeChild(r.element), delete r.element, s(i);
  }
};
export {
  k as loadTheme
};
