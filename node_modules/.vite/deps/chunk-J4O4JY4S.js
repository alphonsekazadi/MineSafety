import {
  i2 as i,
  k
} from "./chunk-HJAFCX7L.js";
import {
  windowIcon,
  windowMinimizeIcon,
  windowRestoreIcon,
  xIcon
} from "./chunk-IX5JQNBR.js";
import {
  a3 as a,
  a4 as a2,
  e,
  e2,
  e3,
  n,
  n4 as n2,
  n5 as n3,
  n6 as n4,
  o8 as o,
  require_prop_types,
  s,
  s10 as s2,
  t,
  v,
  x2 as x
} from "./chunk-TPJZDNMR.js";
import {
  require_react_dom
} from "./chunk-PJEEZAML.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@progress/kendo-react-dialogs/Dialog.mjs
var t5 = __toESM(require_react(), 1);
var K = __toESM(require_react_dom(), 1);
var import_prop_types2 = __toESM(require_prop_types(), 1);

// node_modules/@progress/kendo-react-dialogs/DialogTitleBar.mjs
var t2 = __toESM(require_react(), 1);
var s3 = ({
  children: e6,
  onCloseButtonClick: a3,
  id: i5,
  closeIcon: l2
}) => t2.createElement("div", { className: "k-window-titlebar k-dialog-titlebar", id: i5 }, t2.createElement("span", { className: "k-window-title k-dialog-title" }, e6), l2 && t2.createElement("div", { className: "k-window-titlebar-actions k-dialog-titlebar-actions" }, t2.createElement(
  k,
  {
    role: "button",
    "aria-label": "Close",
    onClick: a3,
    icon: "x",
    svgIcon: xIcon,
    fillMode: "flat",
    className: "k-window-titlebar-action k-dialog-titlebar-action"
  }
)));

// node_modules/@progress/kendo-react-dialogs/DialogActionsBar.mjs
var n5 = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);
var i2 = (s5) => {
  const e6 = {
    layout: "stretched",
    ...s5
  }, { layout: o6, children: a3 } = e6, r3 = n2("k-actions", "k-actions-horizontal", "k-window-actions k-dialog-actions", {
    [`k-actions-${o6}`]: o6
  });
  return n5.createElement("div", { className: r3 }, a3);
};
i2.propTypes = {
  children: import_prop_types.default.any,
  layout: import_prop_types.default.oneOf(["start", "center", "end", "stretched"])
};

// node_modules/@progress/kendo-react-dialogs/constants.mjs
var o2 = "data-windowid";
var D = 10002;
var n6 = 2;
var t4 = ".k-window:not(.k-dialog), .k-dialog-wrapper";

// node_modules/@progress/kendo-react-dialogs/Dialog.mjs
var ce = a();
var $ = t5.forwardRef((j, z) => {
  const I3 = n(), u3 = I3 ? I3 + n6 : D, E2 = t5.useRef(null), n11 = t5.useRef(null), l2 = t5.useRef(o(document)), b = n4(ce, j), r3 = t5.useMemo(
    () => ({
      ...d,
      ...b
    }),
    [b]
  ), {
    title: m,
    width: D3,
    height: h,
    children: c3,
    minWidth: k2,
    dir: v3,
    style: T2,
    themeColor: p,
    contentStyle: x2,
    autoFocusedElement: a3,
    appendTo: S,
    className: f,
    overlayStyle: w,
    modal: A2 = d.modal,
    closeIcon: F2 = d.closeIcon,
    autoFocus: y = d.autoFocus
  } = r3, N = t5.useCallback(
    () => ({
      props: r3,
      element: n11.current
    }),
    [r3]
  );
  t5.useImperativeHandle(E2, N), t5.useImperativeHandle(z, () => E2.current);
  const O = t5.useMemo(() => t5.Children.toArray(c3).filter(
    (e6) => !t5.isValidElement(e6) || e6.type !== i2
  ), [c3]), P = t5.useMemo(() => t5.Children.toArray(c3).filter(
    (e6) => t5.isValidElement(e6) && e6.type === i2
  ), [c3]), { _id: R, contentId: g, id: C2 } = t5.useMemo(() => {
    const e6 = r3.id, s5 = `${e6 != null ? e6 : "accessibility"}-id`, G2 = `dialog-title-${s5}`, H2 = `dialog-content-${s5}`;
    return { _id: s5, contentId: H2, id: e6 || G2 };
  }, [r3.id]), _ = t5.useCallback(() => {
    if (n11.current)
      if (y && !a3)
        n11.current.focus();
      else if (!y && a3 && n11.current) {
        const e6 = n11.current.querySelector(a3);
        e6 == null || e6.focus();
      } else {
        const e6 = [...s].map(
          (s5) => s5 + ":not(.k-dialog-titlebar *)"
        );
        e3(n11.current, e6);
      }
  }, [y, a3]);
  t5.useEffect(() => (_(), () => {
    setTimeout(() => {
      var e6;
      !n11.current && l2.current && e && (document.contains(l2.current) ? l2.current.focus() : l2.current.id && ((e6 = document.getElementById(l2.current.id)) == null || e6.focus()));
    });
  }), [_]);
  const i5 = t5.useCallback(
    (e6) => {
      e6.preventDefault(), v(r3.onClose, e6, N(), void 0);
    },
    [r3.onClose]
  ), M = t5.useCallback(
    (e6) => {
      e6.keyCode === e2.esc && r3.onClose && (e6.preventDefault(), i5(e6)), n3(e6, n11.current);
    },
    [r3.onClose, i5]
  ), L = t5.useMemo(() => t5.createElement(t.Provider, { value: u3 }, t5.createElement(
    "div",
    {
      ref: n11,
      [o2]: R,
      className: "k-dialog-wrapper" + (f ? " " + f : ""),
      onKeyDown: M,
      tabIndex: 0,
      dir: v3,
      style: {
        zIndex: u3,
        ...T2
      }
    },
    A2 && t5.createElement("div", { className: "k-overlay", style: w }),
    t5.createElement(
      "div",
      {
        className: n2("k-window k-dialog", {
          [`k-window-${p}`]: p
        }),
        role: "dialog",
        "aria-labelledby": C2,
        "aria-modal": true,
        "aria-describedby": g,
        style: { width: D3, height: h, minWidth: k2 }
      },
      m && t5.createElement(s3, { closeIcon: F2, onCloseButtonClick: i5, id: C2 }, m),
      t5.createElement("div", { className: "k-window-content k-dialog-content", style: x2, id: g }, O),
      P
    )
  )), [
    u3,
    R,
    f,
    M,
    T2,
    v3,
    w,
    p,
    C2,
    g,
    D3,
    h,
    k2,
    F2,
    i5,
    x2,
    m,
    O,
    P,
    A2
  ]);
  return e ? S !== null ? K.createPortal(L, S || document.body) : L : null;
});
var d = {
  autoFocus: false,
  modal: true,
  closeIcon: true
};
var ae = {
  autoFocus: import_prop_types2.default.bool,
  autoFocusedElement: import_prop_types2.default.string,
  title: import_prop_types2.default.any,
  className: import_prop_types2.default.string,
  closeIcon: import_prop_types2.default.bool,
  modal: import_prop_types2.default.bool,
  overlayStyle: import_prop_types2.default.object,
  width: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  height: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  minWidth: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  onClose: import_prop_types2.default.func,
  children: import_prop_types2.default.node,
  id: import_prop_types2.default.string,
  dir: import_prop_types2.default.string,
  style: import_prop_types2.default.object,
  contentStyle: import_prop_types2.default.object,
  appendTo: import_prop_types2.default.any,
  themeColor: import_prop_types2.default.oneOf(["primary", "dark", "light"])
};
$.displayName = "KendoReactDialog";
$.propTypes = ae;

// node_modules/@progress/kendo-react-dialogs/Window.mjs
var r2 = __toESM(require_react(), 1);
var H = __toESM(require_react_dom(), 1);
var import_prop_types4 = __toESM(require_prop_types(), 1);

// node_modules/@progress/kendo-react-dialogs/WindowTitlebar.mjs
var e4 = __toESM(require_react(), 1);

// node_modules/@progress/kendo-react-dialogs/StageEnum.mjs
var I = ((E2) => (E2.DEFAULT = "DEFAULT", E2.FULLSCREEN = "FULLSCREEN", E2.MINIMIZED = "MINIMIZED", E2))(I || {});

// node_modules/@progress/kendo-react-dialogs/messages/index.mjs
var o4 = "dialogs.windowMaximizeButton";
var i3 = "dialogs.windowMinimizeButton";
var t6 = "dialogs.windowRestoreButton";
var n7 = "dialogs.windowCloseButton";
var s4 = {
  [o4]: "maximize",
  [i3]: "minimize",
  [t6]: "restore",
  [n7]: "close"
};

// node_modules/@progress/kendo-react-dialogs/WindowTitlebar.mjs
var v2 = (t7) => {
  const {
    children: o6,
    onCloseButtonClick: r3,
    onMinimizeButtonClick: m,
    onFullScreenButtonClick: s5,
    onRestoreButtonClick: d2,
    onDoubleClick: f,
    stage: n11,
    forwardedRef: k2,
    id: C2
  } = t7, i5 = i(), E2 = t7.minimizeButton ? e4.createElement(t7.minimizeButton, { onClick: m, stage: n11 }) : e4.createElement(
    k,
    {
      fillMode: "flat",
      icon: "window-minimize",
      svgIcon: windowMinimizeIcon,
      className: "k-window-titlebar-action",
      onClick: m,
      "aria-label": i5.toLanguageString(
        i3,
        s4[i3]
      )
    }
  ), z = t7.maximizeButton ? e4.createElement(t7.maximizeButton, { onClick: s5, stage: n11 }) : e4.createElement(
    k,
    {
      fillMode: "flat",
      icon: "window-maximize",
      svgIcon: windowIcon,
      className: "k-window-titlebar-action",
      onClick: s5,
      "aria-label": i5.toLanguageString(
        o4,
        s4[o4]
      )
    }
  ), b = t7.restoreButton ? e4.createElement(t7.restoreButton, { onClick: d2, stage: n11 }) : e4.createElement(
    k,
    {
      fillMode: "flat",
      icon: "window-restore",
      svgIcon: windowRestoreIcon,
      className: "k-window-titlebar-action",
      onClick: d2,
      "aria-label": i5.toLanguageString(t6, s4[t6])
    }
  ), R = t7.closeButton ? e4.createElement(t7.closeButton, { onClick: r3, stage: n11 }) : e4.createElement(
    k,
    {
      fillMode: "flat",
      icon: "x",
      svgIcon: xIcon,
      className: "k-window-titlebar-action",
      onClick: r3,
      "aria-label": i5.toLanguageString(n7, s4[n7])
    }
  );
  return e4.createElement(
    "div",
    {
      className: "k-window-titlebar",
      style: { touchAction: "none" },
      ref: k2,
      onDoubleClick: f
    },
    e4.createElement("span", { className: "k-window-title", id: C2 }, o6 || ""),
    e4.createElement("div", { className: "k-window-titlebar-actions" }, n11 === I.DEFAULT && E2, n11 === I.DEFAULT && z, n11 !== I.DEFAULT && b, R)
  );
};
var F = e4.forwardRef((t7, o6) => e4.createElement(v2, { ...t7, forwardedRef: o6 }));

// node_modules/@progress/kendo-react-dialogs/WindowResizeHandlers.mjs
var n8 = __toESM(require_react(), 1);
var o5 = ["n", "e", "s", "w", "se", "sw", "ne", "nw"];
var c = class extends n8.Component {
  render() {
    return n8.createElement("div", { className: "k-resize-handles-wrapper" }, " ", o5.map((t7, r3) => n8.createElement(
      s2,
      {
        key: r3,
        onDrag: (s5) => {
          const { event: e6 } = s5;
          e6.originalEvent.preventDefault(), this.props.onResize(e6, { end: false, direction: t7 });
        },
        onRelease: (s5) => {
          const { event: e6 } = s5;
          e6.originalEvent.preventDefault(), this.props.onResize(e6, { end: true, direction: t7 });
        }
      },
      n8.createElement(
        "div",
        {
          className: "k-resize-handle k-resize-" + t7,
          style: { display: "block", touchAction: "none", userSelect: "none" }
        }
      )
    )));
  }
};

// node_modules/@progress/kendo-react-dialogs/MiddleLayerOptimization.mjs
var r = __toESM(require_react(), 1);
var n9 = class extends r.Component {
  shouldComponentUpdate(e6) {
    return e6.shouldUpdateOnDrag || !e6.isDragging;
  }
  render() {
    return this.props.children;
  }
};

// node_modules/@progress/kendo-react-dialogs/WindowActionsBar.mjs
var c2 = __toESM(require_react(), 1);
var import_prop_types3 = __toESM(require_prop_types(), 1);
var i4 = (n11) => {
  const o6 = {
    layout: "end",
    ...n11
  }, { layout: t7, children: s5 } = o6, r3 = n2("k-actions", "k-window-actions", "k-actions-horizontal", "k-hstack", {
    "k-justify-content-start": t7 === "start",
    "k-justify-content-center": t7 === "center",
    "k-justify-content-end": t7 === "end",
    "k-justify-content-stretch": t7 === "stretched"
  });
  return c2.createElement("div", { className: r3 }, s5);
};
i4.propTypes = {
  children: import_prop_types3.default.any,
  layout: import_prop_types3.default.oneOf(["start", "center", "end", "stretched"])
};

// node_modules/@progress/kendo-react-dialogs/utils.mjs
var A = (n11, t7, o6) => {
  let e6 = n11;
  if (t7 && t7.defaultView) {
    const x2 = t7.querySelectorAll(t4);
    let l2 = false;
    return x2.forEach((d2) => {
      const a3 = t7.defaultView.getComputedStyle(d2, null);
      if (d2.getAttribute(o2) !== o6 && a3.zIndex !== null) {
        const I3 = parseInt(a3.zIndex, 10);
        I3 >= e6 && (e6 = I3, l2 = true);
      }
    }), l2 ? e6 + n6 : e6;
  }
  return e6;
};

// node_modules/@progress/kendo-react-dialogs/Window.mjs
var E = 300;
var C = 300;
var D2 = 120;
var T = 100;
var l = 5;
var u = class u2 extends r2.Component {
  constructor(s5) {
    super(s5), this.context = 0, this.draggable = null, this.offSetCoordinates = { x: 0, y: 0 }, this.titleId = this.generateTitleId(), this.mounted = false, this.activeElement = null, this.onKeyDown = (t7) => {
      var p, w, m;
      if (this.props.modal && n3(t7, this.element), t7.target !== t7.currentTarget)
        return;
      const e6 = this.props.minWidth || D2, o6 = this.props.minHeight || T, h = t7.metaKey || t7.ctrlKey, c3 = (m = (w = this.height) != null ? w : (p = this.windowElement) == null ? void 0 : p.clientHeight) != null ? m : 0;
      if (h && this.props.resizable) {
        switch (t7.keyCode) {
          case e2.up:
            t7.preventDefault(), o6 <= c3 - l && this.setState({ height: c3 - l });
            break;
          case e2.down:
            t7.preventDefault(), this.setState({ height: c3 + l });
            break;
          case e2.left:
            e6 <= this.width - l && this.setState({ width: this.width - l });
            break;
          case e2.right:
            this.setState({ width: this.width + l });
            break;
          default:
            return;
        }
        this.dispatchMoveEvent(this.props.onResize, t7, false, void 0);
        return;
      }
      if (t7.altKey) {
        switch (t7.keyCode) {
          case e2.up:
            this.windowStage === I.MINIMIZED ? (this.handleRestore(t7), v(this.props.onStageChange, t7, this, { state: I.DEFAULT })) : this.windowStage === I.DEFAULT && (this.handleFullscreen(t7), v(this.props.onStageChange, t7, this, { state: I.FULLSCREEN }));
            break;
          case e2.down:
            this.windowStage === I.FULLSCREEN ? (this.handleRestore(t7), v(this.props.onStageChange, t7, this, { state: I.DEFAULT })) : this.windowStage === I.DEFAULT && (this.handleMinimize(t7), v(this.props.onStageChange, t7, this, { state: I.MINIMIZED }));
            break;
        }
        return;
      }
      if (!t7.ctrlKey)
        switch (t7.keyCode) {
          case e2.esc:
            this.props.onClose && this.handleCloseWindow(t7);
            return;
          case e2.up:
            this.setState((d2) => ({ top: d2.top - l }));
            break;
          case e2.down:
            this.setState((d2) => ({ top: d2.top + l }));
            break;
          case e2.left:
            this.setState((d2) => ({ left: d2.left - l }));
            break;
          case e2.right:
            this.setState((d2) => ({ left: d2.left + l }));
            break;
          default:
            return;
        }
      this.dispatchMoveEvent(this.props.onMove, t7, false, void 0);
    }, this.onPress = (t7) => {
      const e6 = t7.event;
      this.windowCoordinatesState.differenceLeft = e6.pageX - this.left, this.windowCoordinatesState.differenceTop = e6.pageY - this.top;
    }, this.onDrag = (t7) => {
      const e6 = t7.event;
      e6.originalEvent.preventDefault(), this.windowStage !== I.FULLSCREEN && this.props.draggable && (this.setState({
        top: Math.max(e6.pageY - this.windowCoordinatesState.differenceTop, 0),
        left: e6.pageX - this.windowCoordinatesState.differenceLeft,
        isDragging: true
      }), this.props.onMove && this.dispatchMoveEvent(this.props.onMove, e6, true, false));
    }, this.onRelease = (t7) => {
      const e6 = t7.event;
      this.windowStage !== I.FULLSCREEN && this.props.draggable && this.props.onMove && this.dispatchMoveEvent(this.props.onMove, e6, true, true), this.setState({
        isDragging: false
      });
    }, this.onFocus = () => {
      this._blurTimeout ? (clearTimeout(this._blurTimeout), this._blurTimeout = void 0) : this.setState({
        focused: true,
        zIndex: A(this.getCurrentZIndex(), this.getDocument(), this._id)
      });
    }, this.onBlur = () => {
      clearTimeout(this._blurTimeout);
      const t7 = this.getWindow();
      t7 && (this._blurTimeout = t7.setTimeout(() => {
        this.mounted && this.setState({ focused: false }), this._blurTimeout = void 0;
      }));
    }, this.getInitialTop = () => {
      var o6, h;
      if (this.props.top !== void 0)
        return this.props.top;
      if (this.props.initialTop !== void 0)
        return this.props.initialTop;
      let t7 = C;
      if (this.props.height !== void 0 ? t7 = this.props.height : this.props.initialHeight !== void 0 && (t7 = this.props.initialHeight), this.props.appendTo && t7)
        return this.props.appendTo.offsetHeight / 2 - t7 / 2;
      const e6 = this.getWindow();
      return e6 ? e6.innerHeight / 2 - ((h = t7 != null ? t7 : (o6 = this.windowElement) == null ? void 0 : o6.clientHeight) != null ? h : 0) / 2 : 0;
    }, this.getInitialLeft = () => {
      if (this.props.left !== void 0)
        return this.props.left;
      if (this.props.initialLeft !== void 0)
        return this.props.initialLeft;
      let t7 = E;
      if (this.props.width !== void 0 ? t7 = this.props.width : this.props.initialWidth !== void 0 && (t7 = this.props.initialWidth), this.props.appendTo)
        return this.props.appendTo.offsetWidth / 2 - t7 / 2;
      const e6 = this.getWindow();
      return e6 ? e6.innerWidth / 2 - t7 / 2 : 0;
    }, this.getInitialWidth = () => {
      let t7 = E;
      return this.props.width !== void 0 ? t7 = this.props.width : this.props.initialWidth !== void 0 && (t7 = this.props.initialWidth), t7;
    }, this.getInitialHeight = () => {
      let t7 = C;
      return this.props.height !== void 0 ? t7 = this.props.height : this.props.initialHeight !== void 0 && (t7 = this.props.initialHeight), t7;
    }, this.handleMinimize = (t7) => {
      t7.preventDefault(), this.windowCoordinatesState.leftBeforeAction = this.left, this.windowCoordinatesState.topBeforeAction = this.top, this.windowCoordinatesState.widthBeforeAction = this.width, this.windowCoordinatesState.heightBeforeAction = this.height, this.setState({
        stage: I.MINIMIZED,
        height: 0
      }), v(this.props.onStageChange, t7, this, { state: I.MINIMIZED });
    }, this.handleFullscreen = (t7) => {
      t7.preventDefault(), this.windowCoordinatesState.leftBeforeAction = this.left, this.windowCoordinatesState.topBeforeAction = this.top, this.windowCoordinatesState.widthBeforeAction = this.width, this.windowCoordinatesState.heightBeforeAction = this.height;
      const e6 = this.getWindow(), o6 = e6 ? e6.innerWidth : 0, h = e6 ? e6.innerHeight : 0;
      this.setState({
        left: 0,
        top: 0,
        width: this.props.appendTo ? this.props.appendTo.offsetWidth : o6,
        height: this.props.appendTo ? this.props.appendTo.offsetHeight : h,
        stage: I.FULLSCREEN
      }), v(this.props.onStageChange, t7, this, { state: I.FULLSCREEN });
    }, this.handleRestore = (t7) => {
      t7.preventDefault(), this.windowStage === I.FULLSCREEN ? this.setState({
        stage: I.DEFAULT,
        left: this.windowCoordinatesState.leftBeforeAction,
        top: this.windowCoordinatesState.topBeforeAction,
        width: this.windowCoordinatesState.widthBeforeAction,
        height: this.windowCoordinatesState.heightBeforeAction
      }) : this.windowStage === I.MINIMIZED && this.setState({
        stage: I.DEFAULT,
        height: this.windowCoordinatesState.heightBeforeAction
      }), v(this.props.onStageChange, t7, this, { state: I.DEFAULT });
    }, this.handleCloseWindow = (t7) => {
      t7.preventDefault(), v(this.props.onClose, t7, this, { state: void 0 });
    }, this.handleDoubleClick = (t7) => {
      this.windowStage === I.FULLSCREEN || this.windowStage === I.MINIMIZED ? this.handleRestore(t7) : this.handleFullscreen(t7);
    }, this.handleResize = (t7, e6) => {
      var M, F2, y;
      const o6 = this.props.appendTo ? t7.pageX - this.offSetCoordinates.x : t7.pageX, h = this.props.appendTo ? t7.pageY - this.offSetCoordinates.y : t7.pageY, c3 = this.width, p = (y = (F2 = this.height) != null ? F2 : (M = this.windowElement) == null ? void 0 : M.clientHeight) != null ? y : 0, w = this.props.minWidth || D2, m = this.props.minHeight || T, d2 = this.top - h, L = this.left - o6, b = o6 - this.left, W = h - this.top, f = Object.assign({}, this.state, { isDragging: !e6.end });
      e6.direction.indexOf("n") >= 0 && m - (p + d2) < 0 && (this.top > 0 && (f.height = p + d2), f.top = h), e6.direction.indexOf("s") >= 0 && m - W < 0 && (f.height = W), e6.direction.indexOf("w") >= 0 && w - (c3 + L) < 0 && (this.left > 0 && (f.width = c3 + L), f.left = o6), e6.direction.indexOf("e") >= 0 && w - b < 0 && (f.width = b), this.setState(f), this.dispatchMoveEvent(this.props.onResize, t7, true, e6.end);
    }, this.dispatchMoveEvent = (t7, e6, o6, h) => {
      t7 && t7.call(void 0, {
        nativeEvent: e6.nativeEvent ? e6.nativeEvent : e6.originalEvent,
        drag: o6,
        end: h,
        target: this,
        left: this.state.left,
        top: this.state.top,
        width: this.state.width,
        hight: this.state.height,
        height: this.state.height
      });
    }, this.handleBrowserWindowResize = () => {
      if (this.windowStage === I.FULLSCREEN) {
        const t7 = this.getWindow(), e6 = t7 ? t7.innerWidth : 0, o6 = t7 ? t7.innerHeight : 0;
        this.setState({
          width: this.props.appendTo ? this.props.appendTo.offsetWidth : e6,
          height: this.props.appendTo ? this.props.appendTo.offsetHeight : o6
        });
      }
    }, this.getCurrentZIndex = () => !this.state || this.context === void 0 ? this.context ? this.context : D : this.state.zIndex > (this.context ? this.context + n6 : 0) ? this.state.zIndex : this.context + n6, this.getDocument = () => {
      const t7 = e ? document : null;
      return this.props.appendTo ? this.props.appendTo.ownerDocument : t7;
    }, this.getWindow = () => {
      const t7 = this.getDocument();
      return t7 && t7.defaultView;
    }, this.state = {
      stage: this.props.stage || I.DEFAULT,
      isDragging: false,
      top: 0,
      left: 0,
      width: E,
      height: C,
      focused: true,
      zIndex: D
    }, e && (this.activeElement = document.activeElement);
  }
  get _id() {
    return this.props.id + "-accessibility-id";
  }
  /**
   * @hidden
   */
  componentDidMount() {
    this.element && this.props.autoFocus && this.element.focus({ preventScroll: true });
    const s5 = this.getWindow();
    s5 && s5.addEventListener("resize", this.handleBrowserWindowResize), this.setState({
      stage: this.props.stage || I.DEFAULT,
      isDragging: false,
      top: this.getInitialTop(),
      left: this.getInitialLeft(),
      width: this.getInitialWidth(),
      height: this.getInitialHeight(),
      focused: true,
      zIndex: A(this.getCurrentZIndex(), this.getDocument(), this._id)
    }), this.windowCoordinatesState = {
      leftBeforeAction: this.getInitialLeft(),
      topBeforeAction: this.getInitialTop(),
      widthBeforeAction: this.getInitialWidth(),
      heightBeforeAction: this.getInitialHeight()
    };
    const t7 = this.getDocument();
    if (this.props.appendTo && t7) {
      const e6 = this.props.appendTo.getBoundingClientRect(), o6 = t7.body.getBoundingClientRect();
      this.offSetCoordinates.x = e6.left - o6.left, this.offSetCoordinates.y = e6.top - o6.top;
    }
    this.mounted = true;
  }
  /**
   * @hidden
   */
  componentWillUnmount() {
    const s5 = this.getWindow();
    s5 && s5.removeEventListener("resize", this.handleBrowserWindowResize), this.mounted = false, setTimeout(() => {
      var t7;
      !this.element && this.activeElement && e && (document.contains(this.activeElement) ? this.activeElement.focus({ preventScroll: true }) : this.activeElement.id && ((t7 = document.getElementById(this.activeElement.id)) == null || t7.focus({ preventScroll: true })));
    });
  }
  /**
   * @hidden
   */
  componentDidUpdate(s5) {
    this.props.left && s5.left !== this.props.left && this.setState({ left: this.props.left }), this.props.top && s5.top !== this.props.top && this.setState({ top: this.props.top }), this.props.initialLeft && s5.initialLeft !== this.props.initialLeft && this.setState({ left: this.props.initialLeft }), this.props.initialTop && s5.initialTop !== this.props.initialTop && this.setState({ top: this.props.initialTop });
    const t7 = this.getDocument();
    if (this.props.appendTo && t7) {
      const e6 = this.props.appendTo.getBoundingClientRect(), o6 = t7.body.getBoundingClientRect();
      this.offSetCoordinates.x = e6.left - o6.left, this.offSetCoordinates.y = e6.top - o6.top;
    }
    this.mounted = true;
  }
  /**
   * @hidden
   */
  render() {
    const s5 = r2.Children.toArray(this.props.children), t7 = this.getContent(s5), e6 = this.getActionBar(s5), o6 = this.getCurrentZIndex(), h = n2("k-window", this.props.className, {
      [`k-window-${this.props.themeColor}`]: this.props.themeColor,
      "k-window-minimized": this.state.stage === "MINIMIZED",
      "k-focus": this.state.focused
    }), c3 = r2.createElement(t.Provider, { value: o6 }, r2.createElement(r2.Fragment, null, this.props.modal && r2.createElement(
      "div",
      {
        className: "k-overlay",
        style: {
          zIndex: o6,
          ...this.props.overlayStyle
        }
      }
    ), r2.createElement(
      "div",
      {
        id: this.props.id,
        [o2]: this._id,
        tabIndex: 0,
        role: "dialog",
        "aria-labelledby": this.titleId,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onKeyDown: this.onKeyDown,
        ref: (p) => {
          this.windowElement = p, this.element = p;
        },
        className: h,
        style: {
          top: this.top,
          left: this.left,
          width: this.width,
          height: this.height || "",
          zIndex: o6,
          ...this.props.style
        }
      },
      r2.createElement(
        n9,
        {
          shouldUpdateOnDrag: this.props.shouldUpdateOnDrag || false,
          isDragging: this.state.isDragging
        },
        r2.createElement(
          s2,
          {
            onPress: this.onPress,
            onDrag: this.onDrag,
            onRelease: this.onRelease,
            autoScroll: false,
            ref: (p) => {
              this.draggable = p;
            }
          },
          r2.createElement(
            F,
            {
              stage: this.windowStage,
              onDoubleClick: this.props.doubleClickStageChange ? this.handleDoubleClick : void 0,
              onMinimizeButtonClick: this.handleMinimize,
              onFullScreenButtonClick: this.handleFullscreen,
              onRestoreButtonClick: this.handleRestore,
              onCloseButtonClick: this.handleCloseWindow,
              closeButton: this.props.closeButton,
              minimizeButton: this.props.minimizeButton,
              maximizeButton: this.props.maximizeButton,
              restoreButton: this.props.restoreButton,
              id: this.titleId
            },
            this.props.title
          )
        ),
        this.windowStage !== I.MINIMIZED ? r2.createElement(r2.Fragment, null, r2.createElement("div", { className: "k-window-content" }, t7), e6) : null,
        this.windowStage === I.DEFAULT && this.props.resizable ? r2.createElement(c, { onResize: this.handleResize }) : null
      )
    )));
    return e ? this.props.appendTo !== null ? H.createPortal(c3, this.props.appendTo || document.body) : c3 : null;
  }
  // Getters
  get top() {
    return this.windowStage !== I.FULLSCREEN ? Math.max(this.props.top || this.state.top, 0) : 0;
  }
  get left() {
    return this.windowStage !== I.FULLSCREEN ? Math.max(this.props.left || this.state.left, 0) : 0;
  }
  get width() {
    let s5 = this.props.width || this.state.width;
    if (this.windowStage === I.FULLSCREEN) {
      if (this.props.appendTo)
        return s5 = this.props.appendTo.offsetWidth, s5;
      const t7 = this.getWindow();
      s5 = t7 ? t7.innerWidth : 0;
    }
    return s5;
  }
  get height() {
    let s5 = this.props.height || this.state.height;
    if (this.windowStage === I.FULLSCREEN) {
      if (this.props.appendTo)
        return s5 = this.props.appendTo.offsetHeight, s5;
      const t7 = this.getWindow();
      s5 = t7 ? t7.innerHeight : 0;
    } else this.windowStage === I.MINIMIZED && (s5 = 0);
    return s5;
  }
  get windowStage() {
    return this.props.stage || this.state.stage;
  }
  getActionBar(s5) {
    return s5.filter((t7) => t7 && t7.type === i4);
  }
  getContent(s5) {
    return s5.filter((t7) => t7 && t7.type !== i4);
  }
  generateTitleId() {
    return "window-title-" + this._id;
  }
};
u.displayName = "Window", u.propTypes = {
  width: import_prop_types4.default.number,
  height: import_prop_types4.default.number,
  left: import_prop_types4.default.number,
  top: import_prop_types4.default.number,
  initialWidth: import_prop_types4.default.number,
  initialHeight: import_prop_types4.default.number,
  initialLeft: import_prop_types4.default.number,
  initialTop: import_prop_types4.default.number,
  minWidth: import_prop_types4.default.number,
  minHeight: import_prop_types4.default.number,
  resizable: import_prop_types4.default.bool,
  draggable: import_prop_types4.default.bool,
  title: import_prop_types4.default.any,
  shouldUpdateOnDrag: import_prop_types4.default.bool,
  stage: import_prop_types4.default.oneOf(["DEFAULT", "MINIMIZED", "FULLSCREEN"]),
  className: import_prop_types4.default.string,
  id: import_prop_types4.default.string,
  style: import_prop_types4.default.object,
  overlayStyle: import_prop_types4.default.object,
  autoFocus: import_prop_types4.default.bool
}, u.defaultProps = {
  minWidth: D2,
  minHeight: T,
  resizable: true,
  draggable: true,
  modal: false,
  doubleClickStageChange: true,
  autoFocus: true
}, u.contextType = t;
var I2 = u;
var G = a();
var Y = a2(
  x(
    G,
    I2
  )
);
Y.displayName = "KendoReactWindow";

export {
  i2 as i,
  ce,
  $,
  i4 as i2,
  I2 as I,
  G,
  Y
};
/*! Bundled license information:

@progress/kendo-react-dialogs/DialogTitleBar.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/DialogActionsBar.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/constants.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/Dialog.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/StageEnum.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/messages/index.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/WindowTitlebar.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/WindowResizeHandlers.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/MiddleLayerOptimization.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/WindowActionsBar.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/utils.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/Window.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/index.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)
*/
//# sourceMappingURL=chunk-J4O4JY4S.js.map
